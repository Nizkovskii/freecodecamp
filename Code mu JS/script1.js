"use strict";
//let a = 3; объявляем переменную и задаем ей значение
//alert(a);  выведет 3
//let num = 123; объявляем переменную и задаём ей значение 123
//alert(num); выводим через alert 123 в pop-up окне
/*
let a = 1; 
let b = 2;
let c = 3; здесь мы объявляем несколько переменных*/

//Приведенный выше код можно упростить, написав let один раз и после него перечислив нужные переменные с их значениями, вот так:
//let a = 1, b = 2, c = 3;

//let a, b, c; объявляем все 3 переменные

// Присваиваем переменным значения:
//a = 1;
//b = 2;
//c = 3;

//Изменение значения переменной
/*let a;
a = 10;
alert(a);
a = 20;
alert(a);*/

/*let a = 1 + 2 + 3; операция сложения, помимо неё есть вычитание, умножение, деление
alert(a);*/ 

/*let a = 10;
let b = 2;
let c = a + b; операция сложения. Достаточно поставить -, *, /, так сразу результат поменяется
alert(c);*/

/*
Создайте переменную c со значением 10 и переменную d со значением 5. Просуммируйте их, а результат присвойте переменной result. Выведите на экран значение переменной result.

let c = 10;
let d = 5;
let result = c + d;
alert(result);
*/

// Создайте переменную a со значением 1, переменную b со значением 2 и переменную c со значением 3. Выведите на экран их сумму.

/*let a = 1;
let b = 2;
let c = 3;
let result = a + b + c;
alert(result);*/

//Создайте переменную a со значением 10 и переменную b со значением 5. Отнимите от a переменную b и результат присвойте переменной c. Затем создайте переменную d, присвойте ей значение 7. Сложите переменные c и d, а результат запишите в переменную result. Выведите на экран значение переменной result.

/*let a = 10;
let b = 5;
let c = a - b;
let d = 7;
let result = c + d;
alert(result);*/

//В JS есть приоритеты, их можно выставлять скобками, чтобы правильно посчитался пример
/*let a = 2 * (2 + 4 * (3 + 1));
alert(a);*/

//Создайте переменную a со значением -100. Выведите это значение на экран.
/*let a = -100;
alert(a);*/

//Найдите остаток от деления следующих переменных:
/*let a = 13;
let b = 5;
alert(a % b); Результат 3*/

//Возведите число 2 в 10-ю степень. Выведите результат на экран.
//alert(2 ** 10); получается 1024; Возведение в степень имеет приоритет над умножением и делением;

// Строки в JS
/*let str = "abc";
alert(str); выведет 'abc'*/

//Сложение строк
/*let str1 = "abc";
let str2 = "def";
alert(str1 + str2); выводим abcdef*/

//Чтобы сделать пробел между строками, достаточно написать " "
/*let str1 = 'abc';
let str2 = 'def';
alert(str1 + ' ' + str2); выведет 'abc def'

let str = 'abc';
alert(str + ' def'); // выведет 'abc def' Можно добавлять пробел и другим способом
*/

//Создайте переменную с текстом 'hello' и переменную с текстом 'world'. С помощью этих переменных и операции сложения строк выведите на экран строку 'hello world'.

/*let str1 = 'hello';
let str2 = 'world';
alert(str1 + ' ' + str2); выводим hello world*/

//Длина строки в JS. Пока что непонятно зачем это нужно, но пусть будет

/*let str = 'abcdef';
alert(str.length); выведет 6*/

//alert('abc def'.length); стоит отметить что пробел тоже является символом и его тоже засчитает

//Шаблонные строки в JS
//В косых кавычках можно выполнять вставку переменных. Для этого имя переменной нужно написать в конструкции ${}.
/*let str = 'xxx';
let txt = `aaa ${str} bbb`;
alert(txt); вывод: aaa xxx bbb*/

/*let str1 = 'xxx';
let str2 = 'yyy';
let txt  = `aaa ${str1} bbb ${str2} ccc`;
alert(txt); вывод: aaa xxx bbb yyy ccc*/

/*let str = `a
b
c`; многострочность черех косые кавычки*/

/*let a;
alert(a); выведет undefined, потому что не задано значение*/

/*let a = undefined;
alert(a); задаем точное значение undefined*/

/*let a = null;
alert(a); выведет null*/

/*alert('abc' * 3); выведет NaN
alert(NaN + 1); выведет NaN в любом случае
*/

//alert('abc' * 'def'); выводит NaN, то есть не число

/*alert( 10 / 0); выведет Infinity
alert(-10 / 0); выведет -Infinity
JS не выдаёт ошибку при делении на ноль. Поэтому делить можно, но выведет Infinity с положительным знаком или отрицательным*/

/*let num = 123; объявляем переменную num
console.log(num); выводимв консоль браузера 123*/

//Можно вывести несколько переменных друг за другом

/*let num1 = 123;
let num2 = 456;

console.log(num1);
console.log(num2);*/

//Можно вывести в консоль переменные с помощью одной команды: console.log(num1, num2);

//Даны три переменные. Выведите в консоль их значения.

/*Решение
let num1 = 123;
let num2 = 456;
let num3 = 789;
console.log(num1, num2, num3);*/

//Разница в цвете строк и чисел
//console.log(123); числа фиолетовые
//console.log('123'); строки белые

/*let str1 = "yes";
let str2 = "no";
alert(str1, str);

Здесь допущена сознательная ошибка, чтобы посмотреть как на это отреагирует консоль
Консоль показывает строку, в которой содержится ошибка*/

//Кроме переменных в JavaScript можно создавать еще и константы. В них можно записывать данные только один раз, а затем их значения нельзя изменять. Константы объявляются с помощью оператора const. Обычно их записывают большими буквами, чтобы можно было различить.

/*const PI = 3.14;
PI = 3; выдаст ошибку, т.к. мы попытались присвоить другое значение константе*/

//Сделайте константу PI и с ее помощью вычислите длину какой-нибудь окружности по ее радиусу.

/*const PI = 3.14;
let r = 10;
alert(2 * r * PI); получаем 62 с чем-то*/

//Автоматическое преобразование типов данных

//alert ('6' * '6'); выведет 36, хотя по факту это строки. JavaScript автоматически выполняет преобразование этих строк к числам и выполняет соответствующую математическую операцию над ними.

//alert('2' * '3s'); // выведет NaN, так как есть буква рядом с числом

/*let a = '1' + '2';
alert(a); выведет '12' - произошло сложение строк*/

//Если одно из слагаемых число, а другое - строка, то всегда побеждает строка:

/*let a = 1 + '2';
alert(a); выведет '12' 
В таких случаях JavaScript, наоборот, автоматически преобразует числа в строки и выполняет сложение строк.*/

//Важно! Если число-строка первая, то произойдёт обычное сложение, ибо JS преобразут числа в строки. Если хотим всё-таки выполнить сложение чисел, то их стоить взять в скобки или поставитть первыми, например let a = 2 + 3 + '1';

/*let a = '1' + 2 + 3;
alert(a); выведет '123'*/

/*let a = '5' + 2;
alert(a); выведет 52*/

/*let a = 5 + '2';
alert(a); выведет 52*/

/*let a = '5' * '2';
alert(a); выведет 10*/

/*let a = '5' / '2';
alert(a); выведет 2.5*/

/*let a = '5s' * '2';
alert(a); выведет NaN*/

/*let a = (-'5') + (-'2');
alert(a); выведет -7???*/

/*let a = '5' * 1 + '2' * 1;
alert(a); выводим 7*/

/*let a = '5' * '1' + '2' * '1';
alert(a); выводим 7*/

/*let a = '' + 3 + 1;
alert(a); выводим 31*/

//Принудительно преобразование

/*let a = '2';
let b = '3';
alert(Number(a) + Number(b)); выведет 5*/

//Можно преобразовывать строки в числа не в операции сложения, а сразу при записи в переменную - это будет работать:

/*let a = Number('2');  в переменную запишется число 2
let b = Number('3');  в переменную запишется число 3
alert(a + b);  выведет 5*/

//alert( '2' + Number('3') ); выведет 23

//Можно не писать Number, а использовать +

/*let a = +'2';
let b = +'3';
alert(a + b); выводим 5*/

/*let a = '2';
let b = +a; // в b запишется число 2*/

//При попытке преобразовать строку, содержащую не только цифры, но и другие символы, функция Number вернет своим результатом значение NaN (тот же эффект даст +):

//alert(Number('2s')); выведет NaN

//Функция Number работает только со строками, состоящими из цифр.

//Функция parseInt — выводит число из строки
/*let num = parseInt('12px');
alert(num);*/
// Но если число будет дробное, например let num = parseInt('12.5px'); то при выведется только 12
//Как решить эту проблему?
//На этот случай есть parseFloat
/*let num = parseFloat('12.5px');
alert(num);
Отсутствие дробной части не мешает функции parseFloat работать корректно*/

//Дана переменная со значением '5px' и переменная со значением '6px'. Найдите сумму пикселей из значений этих переменных и выведите ее на экран.

/*let num = parseInt('5px');
let num2 = parseInt('6px');
alert(num + num2);*/

//Преобразование к строке в JavaScript

/*let num1 = 1;
let num2 = 2;
alert(String(num1) + String(num2)); выведет 12

Это обратное преобразование из числа в строку*/

//Если захотим посчитать количество символов в числах, но получится undefined, такак функция length относится только к строкам

/*let num = 12345;
let str = String(num);
alert(str.length); выведет 5*/

// Короткая запись

/*let num = 12345;
alert(String(num).length);*/

//TRUE AND FALSE 

//alert(true + 3);

//Преобразование к логическому типу в JavaScript

/*console.log(Boolean(0));          // false
console.log(Boolean(-0));         // false
console.log(Boolean(+0));         // false
console.log(Boolean(null));       // false
console.log(Boolean(false));      // false
console.log(Boolean(NaN));        // false
console.log(Boolean(undefined));  // false
console.log(Boolean(''));         // false

Все значения в консоли выводят False*/

/*let test = Boolean(3);
alert(test); выведет true*/

/*let test = Boolean(-1);
alert(test); выведет true*/

/*console.log(Boolean(-1));          // true
console.log(Boolean(Infinity));    // true
console.log(Boolean(-Infinity));   // true
console.log(Boolean('0'));         // true
console.log(Boolean('false'));     // true
console.log(Boolean('NaN'));       // true
console.log(Boolean('null'));      // true
console.log(Boolean('undefined')); // true*/

/*let test = Boolean(1 / 0);
alert(test); выведет true*/

//Получение символов строками
/*let str = 'abcde';

alert(str[0]); // выведет 'a'
alert(str[1]); // выведет 'b'
alert(str[2]); // выведет 'c'*/

/*let str = 'abcde';
let num = 3; // номер символа в переменной

alert(str[num]); // выведет 'd'

В строгом режиме изменять строки нельзя, но их можно читать, это понятно*/

//Но как вывести последний символ строки? Нужно считать количество? Нет, есть специальная функция

//Пусть у нас будет строка

/*let str = 'abcde';
let last = str.length - 1;
alert(str[last]); проверяем и выводим e*/

/*let str = 'abcdef';
alert(str[str.length - 1]); выведет f*/

//https://code.mu/ru/javascript/book/prime/basis/digits-strings/